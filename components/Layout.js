/* eslint-disable react/jsx-no-undef */
import React, { useContext, useEffect, useState } from "react";
import Head from "next/head";
import Link from "next/link";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { Store } from "@/context/Store";
import { Menu } from "@headlessui/react";
import { signOut, useSession } from "next-auth/react";
import DropdownLink from "./DropdownLink";
import Cookies from "js-cookie";
import { useRouter } from "next/router";
import {
  MenuIcon,
  MoonIcon,
  SearchIcon,
  SunIcon,
} from "@heroicons/react/outline";
import { useTheme } from "next-themes";
import {
  Box,
  Divider,
  Drawer,
  IconButton,
  List,
  ListItem,
  ListItemText,
  Typography,
} from "@mui/material";
import { Cancel } from "@mui/icons-material";
import axios from "axios";
import { getError } from "@/utils/error";

export default function Layout({ title, children }) {
  const [mounted, setMounted] = useState(false);
  const [cartItemsCount, setCartItemsCount] = useState(0);
  const { status, data: session } = useSession();

  const { state, dispatch } = useContext(Store);
  const { cart } = state;

  // Dark mode
  const { theme, systemTheme, setTheme } = useTheme();
  const currentTheme = theme === "system" ? systemTheme : theme;

  useEffect(() => {
    setMounted(true);
  }, []);
  Cookies.set("darkMode", currentTheme);

  // count a cart
  useEffect(() => {
    setCartItemsCount(cart.cartItems.reduce((a, c) => a + c.quantity, 0));
  }, [cart.cartItems]);

  // Logout
  const logoutClickHandler = () => {
    //remove the card items  called cookies that remove cart control

    Cookies.remove("cart");
    // cart reset action get dispatch from use
    dispatch({ type: "CART_RESET" });
    signOut({ callbackUrl: "/login" });
  };

  const [query, setQuery] = useState("");

  const router = useRouter();
  const submitHandler = (e) => {
    e.preventDefault();
    router.push(`/search?query=${query}`);
  };

  // Show sidebar
  const [sidebarVisible, setSidebarVisible] = useState(false);
  const sidebarOpenHandler = () => {
    setSidebarVisible(true);
  };
  const sidebarCloseHandler = () => {
    setSidebarVisible(false);
  };

  const [categories, setCategories] = useState([]);

  const fetchCategories = async () => {
    try {
      const { data } = await axios.get(`/api/products/categories`);
      setCategories(data);
    } catch (err) {
      toast.error(getError(err), { variant: "error" });
    }
  };

  useEffect(() => {
    fetchCategories();
  }, []);

  // footer
  const date = new Date();
  const year = date.getFullYear();

  return (
    <>
      <Head>
        <title>
          {title ? title + "-Ecommerce by Nextjs" : "Ecommerce by Nextjs"}
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/shopping.png" />
      </Head>
      <ToastContainer position="bottom-center" limit={1} />

      <div className="flex min-h-screen flex-col justify-between bg-white dark:bg-slate-800 duration-100">
        <header>
          <nav className="flex h-12 items-center px-4 justify-between shadow-md dark:text-slate-400 ">
            <IconButton
              edge="start"
              aria-label="open drawer"
              onClick={sidebarOpenHandler}
            >
              <MenuIcon className=" text-gray-900 h-5 w-5  dark:text-white " />
            </IconButton>

            <Link href="/" className="text-lg font-bold">
              Ecommerce
            </Link>

            <Drawer
              anchor="left"
              open={sidebarVisible}
              onClose={sidebarCloseHandler}
            >
              <List>
                <ListItem>
                  <Box
                    display="flex"
                    alignItems="center"
                    justifyContent="space-between"
                  >
                    <Typography>Shopping by category</Typography>
                    <IconButton
                      aria-label="close"
                      onClick={sidebarCloseHandler}
                    >
                      <Cancel />
                    </IconButton>
                  </Box>
                </ListItem>
                <Divider />
                {categories.map((category) => (
                  <Link
                    key={category}
                    href={`/search?category=${category}`}
                    passHref
                  >
                    <ListItem
                      button
                      component="a"
                      onClick={sidebarCloseHandler}
                    >
                      <ListItemText primary={category}></ListItemText>
                    </ListItem>
                  </Link>
                ))}
              </List>
            </Drawer>

            <form
              onSubmit={submitHandler}
              className="mx-auto  hidden w-full justify-center md:flex"
            >
              <input
                onChange={(e) => setQuery(e.target.value)}
                type="text"
                className="rounded-tr-none rounded-br-none p-1 text-sm   focus:ring-0"
                placeholder="Search Products"
              />
              <button
                className="rounded rounded-tl-none rounded-bl-none bg-amber-300 p-1 text-sm dark:text-black"
                type="submit"
                id="button-addon2"
              >
                <SearchIcon className="h-5 w-5" />
              </button>
            </form>

            <div className="flex justify-content-between items-center ">
              {mounted && currentTheme === "dark" ? (
                <SunIcon
                  className="h-5 w-5 text-xl cursor-pointer hover:text-amber-500 "
                  onClick={() => setTheme("light")}
                />
              ) : (
                <MoonIcon
                  className="h-5 w-5 text-xl hover:text-amber-500"
                  onClick={() => setTheme("dark")}
                />
              )}

              <Link href="/cart" className="p-2">
                Cart
                {cartItemsCount > 0 && (
                  <span className="ml-1 rounded-full bg-red-600 px-2 py-1 text-xs font-bold text-white">
                    {cartItemsCount}
                  </span>
                )}
              </Link>

              {status === "loading" ? (
                "Loading"
              ) : session?.user ? (
                // use as to convert this menu as a div in the output html
                <Menu as="div" className="relative inline-block">
                  <Menu.Button className="text-blue-600">
                    {session.user.name}
                  </Menu.Button>
                  {/* // to show a drop down use menu dot items */}
                  <Menu.Items className="absolute right-0 w-56 origin-top-right bg-white  shadow-lg ">
                    <Menu.Item>
                      <DropdownLink className="dropdown-link" href="/profile">
                        Profile
                      </DropdownLink>
                    </Menu.Item>
                    <Menu.Item>
                      <DropdownLink
                        className="dropdown-link"
                        href="/order-history"
                      >
                        Order History
                      </DropdownLink>
                    </Menu.Item>
                    <Menu.Item>
                      <Link
                        className="dropdown-link"
                        href="#!"
                        onClick={logoutClickHandler}
                      >
                        Logout
                      </Link>
                    </Menu.Item>
                  </Menu.Items>
                </Menu>
              ) : (
                <Link href="/login" className="p-2 ">
                  Login
                </Link>
              )}
            </div>
          </nav>
        </header>
        <main className="container m-auto mt-4 px-4 ">{children}</main>
        <footer className="flex justify-center items-center shadow-inner pt-5 pb-5  mt-5  ">
          <p className="text-lg">Copyright Â© {year} Ecommerce-by Sayed Ali</p>
        </footer>
      </div>
    </>
  );
}
